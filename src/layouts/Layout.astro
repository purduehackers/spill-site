---
interface Props {
	title: string
	description: string
}

const { title, description } = Astro.props
import '@/styles/global.css'
import { ClientRouter } from 'astro:transitions'
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>{title}</title>
		<meta name="description" content={description} />
		<link rel="icon" href="/favicon.svg" type="image/svg+xml" />
		<ClientRouter />
	</head>
	<body>

		<!-- Drawing toggle button and canvas overlay -->
		<button aria-label="Toggle drawing" class="draw-toggle" id="draw-toggle" title="Draw (p)">
			<?xml version="1.0" encoding="utf-8"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
			<svg fill="#4B3732" width="22" height="22" viewBox="0 -4.23 100 100" xmlns="http://www.w3.org/2000/svg">
				<path id="_pencil" data-name="
				pencil" d="M407.273,1184.529a5.432,5.432,0,0,1-1.048.087,2.453,2.453,0,0,1-2.178-2.916,11.252,11.252,0,0,1,1.581-4.045c.476-.735,1.029-1.422,1.456-2.182a14.738,14.738,0,0,0,1.526-3.125,140.226,140.226,0,0,1,5.682-15.592c.661-1.617,1.37-3.22,1.935-4.873a8,8,0,0,1,2.437-3.553c3.462-2.984,6.873-6.029,10.361-8.978a205.247,205.247,0,0,0,20.018-19.558c1.366-1.52,2.691-3.073,4.045-4.6a42.667,42.667,0,0,1,6.053-5.469,68.569,68.569,0,0,0,6.9-5.834,15.923,15.923,0,0,1,1.537-1.342,30.908,30.908,0,0,0,6.665-6.894c2.23-3.242,2.776-2.545,5.65-2.409a5.114,5.114,0,0,1,1.681.417c2.33.972,4.659,1.955,6.955,3a16.738,16.738,0,0,1,3.871,2.579,8.68,8.68,0,0,1,2.477,3.2,39.628,39.628,0,0,0,3.762,6.225c1.01,1.545,1.994,3.109,2.92,4.7a6.408,6.408,0,0,1,.853,2.152,9.157,9.157,0,0,0,1.275,3.8,2.4,2.4,0,0,1-.3,2.752,22.411,22.411,0,0,1-2.462,2.862c-1.93,1.779-3.959,3.451-5.938,5.177-3.885,3.384-7.8,6.737-11.635,10.18-3.473,3.122-6.814,6.382-10.287,9.5-2.821,2.531-5.7,5-8.647,7.392-4.684,3.8-9.394,7.552-13.836,11.637-1.575,1.448-3.216,2.825-4.85,4.206a10.927,10.927,0,0,1-1.671,1.16c-1.273.709-2.557,1.4-3.871,2.029a7.973,7.973,0,0,1-2.463.858c-6.022.615-11.748,2.552-17.631,3.791a28.533,28.533,0,0,0-7.127,2.314A10.972,10.972,0,0,1,407.273,1184.529Zm73.82-82.609a1.143,1.143,0,0,0-.136-.21c-.03-.036-.094-.04-.142-.061.118.064.235.127.354.189-.212.862.417,1.415.784,2.053a.718.718,0,0,0,.978.3,1.86,1.86,0,0,0,.857-.681c.223-.462-.306-.606-.6-.744C482.512,1102.446,481.8,1102.2,481.093,1101.92Zm-48.467,55.431c.046.829.049,1.218.091,1.6a1.338,1.338,0,0,0,1.339,1.268c.289.024.582.006.873.03a2.83,2.83,0,0,0,2.712-1.325,32.779,32.779,0,0,1,3.023-3.531,109.438,109.438,0,0,1,12.592-10.807q11.037-8.344,22.017-16.765,2.085-1.594,4.086-3.287c1.708-1.435,3.341-2.963,5.075-4.369s3.575-2.682,5.322-4.071c3.341-2.653,3-2.534.427-5.582a1.3,1.3,0,0,0-1.827-.312,37.343,37.343,0,0,0-6.581,4.283,43.025,43.025,0,0,1-7.322,4.742,31.749,31.749,0,0,0-7.539,5.434c-6.239,5.986-12.485,11.959-18.945,17.713-4.642,4.131-9,8.585-13.911,12.413A3.037,3.037,0,0,0,432.626,1157.351Zm11.575,9.968a2.37,2.37,0,0,0,.74-.334c.986-.938,1.957-1.891,2.9-2.869a81.022,81.022,0,0,1,8.934-7.9,180.092,180.092,0,0,0,15.875-13.7c5.923-5.759,12.089-11.239,18.4-16.566,2.075-1.753,4.063-3.61,6.073-5.441a4.409,4.409,0,0,0,.892-1.128.968.968,0,0,0-.061-.8,1.171,1.171,0,0,0-1.934-.388c-2.956,2.368-5.924,4.722-8.844,7.13-1.947,1.6-3.756,3.381-5.746,4.924-5.982,4.646-12.027,9.211-18.038,13.813-5.01,3.835-10.034,7.656-15,11.542-1.987,1.553-3.842,3.276-5.766,4.908a1.671,1.671,0,0,0-.465,2.084c.433,1.182.752,2.4,1.137,3.6a2.982,2.982,0,0,0,.395.777A1.943,1.943,0,0,0,444.2,1167.319Zm-4.145,3.1c-.04-.09-.081-.176-.117-.267a27.87,27.87,0,0,1-1.311-3.538,2.694,2.694,0,0,0-2.646-2.26c-1.061-.107-2.134-.1-3.2-.178-2.756-.207-4.13-.246-4.174-4.2a3.493,3.493,0,0,0-1.937-3.314q-2.938-1.6-5.919-3.131a1.083,1.083,0,0,0-1.49.47,4.753,4.753,0,0,0-.536,1.337,76.733,76.733,0,0,1-2.637,10.426,3.148,3.148,0,0,0,.59,3.25,18.417,18.417,0,0,0,2.736,2.6,5.434,5.434,0,0,1,2.21,2.957c.211.774.613.924,1.3.728,1.958-.546,3.9-1.161,5.877-1.644,2.544-.619,5.118-1.1,7.662-1.709,1.121-.27,2.207-.69,3.3-1.072C439.9,1170.828,439.961,1170.575,440.056,1170.417Zm-3.133-30.053a1.774,1.774,0,0,0-2.253.6c-.682.688-1.383,1.361-2.016,2.091a1.4,1.4,0,0,0,.463,2.2,1.148,1.148,0,0,0,1.362.021c1.5-1.058,3.029-2.083,4.444-3.25,2.313-1.911,4.553-3.915,6.8-5.9a18.276,18.276,0,0,0,1.346-1.459c-.417-.967-1.369-.389-2.016-.69-.172-.081-.4-.055-.557-.149a1.873,1.873,0,0,0-2.569.5c-.457.5-.953.967-1.441,1.435a1.8,1.8,0,0,0-.589,2.305,1.3,1.3,0,0,1-.933,1.809C438.247,1140.115,437.485,1140.233,436.923,1140.364Zm32.983-33.158a2.089,2.089,0,0,0-.51.218c-.3.245-.567.516-.838.788-1.136,1.121-1.111,1.261.2,2.023a8.72,8.72,0,0,1,3.009,2.143c.476.654.751.591,1.248-.178,1.184-1.829,1.858-1.565-.555-3.223-.707-.486-1.347-1.067-2.034-1.586A1.791,1.791,0,0,0,469.906,1107.206Zm-6.029,6.285c-1.2-.223-1.352-.184-1.771.318-.74.885-1.465,1.778-2.191,2.674a.729.729,0,0,0-.083.242c.174.045.448.188.506.125a3.17,3.17,0,0,1,3.2-.814,5.359,5.359,0,0,1,2.063.952.988.988,0,0,0,1.48-.083c.072-.061.151-.119.226-.178,1.164-.892,1.119-1.227-.184-2.033A8.361,8.361,0,0,0,463.877,1113.491Zm11.3-10.916c-.309.244-.7.515-1.048.825-.372.327-.395.7-.043.944q1.917,1.3,3.86,2.557c.616.4,1.1.023,1.552-.358a.611.611,0,0,0,.066-.978c-1.24-.914-2.481-1.832-3.728-2.737A3.22,3.22,0,0,0,475.18,1102.575Zm-14.326,20.217c-.023-.166-.007-.263-.049-.318-.053-.071-.16-.172-.225-.161a4.681,4.681,0,0,1-4.7-1.461.3.3,0,0,0-.25-.031.874.874,0,0,0-.245.15.838.838,0,0,0-.257,1.231,6.211,6.211,0,0,1,2.077,3.054c.074.355.4.315.645.137.311-.224.607-.474.9-.728C459.466,1124.032,460.178,1123.391,460.854,1122.792Zm-8.3,7.066a1.486,1.486,0,0,0,.515-.188c.506-.435.993-.894,1.471-1.361.339-.33.28-.649-.075-.939-.591-.485-1.165-.991-1.77-1.457a3.194,3.194,0,0,0-.766-.375c-.324-.137-1.028.287-1.328.878a.787.787,0,0,0,.081.723,5.674,5.674,0,0,1,1.447,2.426C452.169,1129.694,452.412,1129.762,452.558,1129.858Zm-2.773,1.988c-.028.048-.1.117-.081.153.03.069.106.118.161.176.035-.109.068-.219.1-.329Z" transform="translate(-404 -1093.086)" fill-rule="evenodd"/>
			</svg>
		</button>
		<canvas id="draw-canvas" class="draw-canvas" aria-hidden="true"></canvas>

		<!-- 
		i'm debating if i want the purdue hackers logo in the corner xx
		<a href="https://www.purduehackers.com" target="_blank" rel="noopener noreferrer" class="purdue-hackers-link">
			<svg width="44" height="57" viewBox="0 0 1759 2278" fill="none" xmlns="http://www.w3.org/2000/svg">
				<path fill-rule="evenodd" clip-rule="evenodd" d="M440.761 269L877.5 523.648L1300.55 276.601L1301.81 769.419L1330.64 769.766L1332.14 262.986L1755.66 502.395L1758.53 1520.21L1332.53 1758.43L1332.14 1240.85L877.498 1505.43V2028.09L438.683 2277.81L0.625732 2023.42L2.22669 1533.57L447.52 1788.95L460.707 1763.51L18.5434 1506.53L441.3 1259.83L440.761 269Z" fill="#4B3732"/>
				<path fill-rule="evenodd" clip-rule="evenodd" d="M890.937 1528.74L1303.95 1767.75L890.937 1528.74ZM1302.67 1287.72C1302.86 1287.61 1303.09 1287.61 1303.28 1287.72C1303.47 1287.83 1303.58 1288.03 1303.58 1288.24L1303.95 1767.75L1302.37 1289.3L890.938 1528.74L1303.28 1287.72L1303.95 1767.75L890.938 1528.74" fill="#4B3732"/>
				<path fill-rule="evenodd" clip-rule="evenodd" d="M877.5 493.268L454.076 246.383L877.313 0.925293L1300.55 246.221L877.5 493.268Z" fill="#4B3732"/>
			</svg>
		</a> -->


		<div class="graph-paper-decoration">
			<img src="/img/graphpaper.png" alt="silly graph paper" class="graph-paper-image" draggable="false"/>
		</div>

		<!-- coffee stains 0_0 -->
		<div class="coffee-stain coffee-stain-1">
			<img src="/img/coffee/10.png" alt="Coffee stain" class="coffee-stain-img" draggable="false"/>
		</div>
		<div class="coffee-stain coffee-stain-2">
			<img src="/img/coffee/20.png" alt="Coffee stain" class="coffee-stain-img" draggable="false"/>
		</div>
		<div class="coffee-stain coffee-stain-3">
			<img src="/img/coffee/35.png" alt="Coffee stain" class="coffee-stain-img" draggable="false"/>
		</div>
		<div class="coffee-stain coffee-stain-4">
			<img src="/img/coffee/85.png" alt="Coffee stain" class="coffee-stain-img" draggable="false"/>
		</div>
		<div class="coffee-stain coffee-stain-5">
			<img src="/img/coffee/89.png" alt="Coffee stain" class="coffee-stain-img" draggable="false" />
		</div>
		<!-- <div class="sticky-note">
			<img src="/img/untidy-stack-yellow-sticky-post-notes-isolated-white.png" alt="sticky note" class="sticky-note-img" draggable="false"/>
		</div> -->
		<!-- <div class="paper-texture">
			<img src="/img/paper.jpg" alt="paperrrr" class="paper-texture-img" draggable="false"/>
		</div> -->
		<slot />
		
		<!-- Grain texture overlay -->
		<div class="grain-overlay"></div>

		<!-- SVG Filter for ink bleed effect -->
		<svg style="visibility: hidden; position: absolute" width="0" height="0" xmlns="http://www.w3.org/2000/svg" version="1.1">
			<defs>
				<filter id="goof">
					<feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur" /> 
					<feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 10 -7.5" result="goof2" />
					<feComposite in="SourceGraphic" in2="goof2" operator="atop"/>
					<feTurbulence
						id="turbulence"
						type="fractalNoise"
						baseFrequency="0.025"
						numOctaves="4"
						seed="1"
						result="turbulence" />
					<feDisplacementMap
						id="displacement"
						in2="turbulence"
						in="goof2"
						scale="5"
						xChannelSelector="R"
						yChannelSelector="B" />
				</filter>
			</defs>
		</svg>
		
		<script>
			// Wait for DOM to be ready
			document.addEventListener('DOMContentLoaded', function() {
				// Create canvas-based paper texture
				const canvas = document.createElement("canvas");
				const ctx = canvas.getContext("2d");

				function createTexture(size: number, name: string, color: string) {
					if (!ctx) return;
					
					canvas.width = size;
					canvas.height = size;

					ctx.fillStyle = color;

					for (let x = 0; x < size; x++) {
						for (let y = 0; y < size; y++) {
							if (Math.random() > 0.3) {
								ctx.fillRect(x, y, 1, 1);
							}
						}
					}

					canvas.toBlob((blob) => {
						if (blob) {
							const url = URL.createObjectURL(blob);
							document.documentElement.style.setProperty(name, `url(${url})`);
						}
					});
				}

				createTexture(256, "--grain-texture", "#a69f95");
				
				// Simple scroll lock implementation without GSAP
				let isAtBottom = false;
				let isScrolling = false;
				
				function checkScrollPosition() {
					const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
					const windowHeight = window.innerHeight;
					const documentHeight = document.documentElement.scrollHeight;
					
					// Check if we're at the bottom (with small tolerance)
					const atBottom = scrollTop + windowHeight >= documentHeight - 10;
					
					if (atBottom && !isAtBottom) {
						isAtBottom = true;
						// Prevent further scrolling
						document.body.style.overflow = "hidden";
					} else if (!atBottom && isAtBottom) {
						isAtBottom = false;
						// Allow scrolling
						document.body.style.overflow = "auto";
					}
				}
				
				// Throttled scroll handler
				function handleScroll() {
					if (!isScrolling) {
						requestAnimationFrame(() => {
							checkScrollPosition();
							isScrolling = false;
						});
						isScrolling = true;
					}
				}
				
				// Add scroll listener
				window.addEventListener('scroll', handleScroll, { passive: true });
				
				// Initial check
				checkScrollPosition();
				const filterElement = document.querySelector('svg filter');
				if (!filterElement) return;
				
				const filterId = filterElement.id;
				const feGauss = document.querySelector(`#${filterId} feGaussianBlur`);
				const feDisp = document.querySelector(`#${filterId} feDisplacementMap`);
				const feTurb = document.querySelector(`#${filterId} feTurbulence`);
				const el = document.querySelector(".goo");

				if (!feGauss || !feDisp || !feTurb || !el) return;

				let isMobile = window.innerWidth < 768;
				let scale = isMobile ? 4 : 8;
				let time = 0;

				// inital scale >_<
				(feGauss as Element).setAttribute('stdDeviation', scale.toString());
				const displacementScale = Math.max(1, scale * 0.5);
				(feDisp as Element).setAttribute('scale', displacementScale.toString());

				// Animation loop for flowing turbulence
				function animate() {
					time += 0.01;
					
					// Animate the seed for flowing ripple motion
					(feTurb as Element).setAttribute('seed', Math.floor(time * 3).toString());
					
					// Tie displacement scale to blur amount for growing distortion
					const displacementScale = Math.max(1, scale * 0.5);
					(feDisp as Element).setAttribute('scale', displacementScale.toString());
					
					requestAnimationFrame(animate);
				}

				function zoom(event: Event) {
					const wheelEvent = event as WheelEvent;
					wheelEvent.preventDefault();

					scale += wheelEvent.deltaY * 0.01;

					// we care about mobile
					if (isMobile) {
						scale = Math.min(Math.max(4, scale), 100);
					} else {
						scale = Math.min(Math.max(10, scale), 100);
					}

					// Apply scale transform
					(feGauss as Element).setAttribute('stdDeviation', scale.toString());
				}

				function handleResize() {
					const wasMobile = isMobile;
					isMobile = window.innerWidth < 800;
					
					// we care about these resizers. gah.
					if (wasMobile !== isMobile) {
						scale = isMobile ? 3 : 8;
						(feGauss as Element).setAttribute('stdDeviation', scale.toString());
						const displacementScale = Math.max(1, scale * 0.5);
						(feDisp as Element).setAttribute('scale', displacementScale.toString());
					}
				}


				//draw :3
				const toggleBtn = document.getElementById('draw-toggle');
				const drawCanvas = document.getElementById('draw-canvas') as HTMLCanvasElement | null;
				const drawCtx = drawCanvas ? drawCanvas.getContext('2d') : null;
				let drawingActive = false;
				let drawing = false;
				let lastX = 0;
				let lastY = 0;
				// store strokes as arrays of points
				type Point = { x: number; y: number };
				type Stroke = { points: Point[] };
				const strokes: Stroke[] = [];
				let deviceScale = Math.max(1, Math.min(window.devicePixelRatio || 1, 3));
				function resizeCanvas() {
					if (!drawCanvas || !drawCtx) return;
					drawCanvas.width = Math.floor(window.innerWidth * deviceScale);
					drawCanvas.height = Math.floor(window.innerHeight * deviceScale);
					drawCanvas.style.width = window.innerWidth + 'px';
					drawCanvas.style.height = window.innerHeight + 'px';
					drawCtx.scale(deviceScale, deviceScale);
					drawCtx.lineCap = 'round';
					drawCtx.lineJoin = 'round';
					drawCtx.strokeStyle = '#4B3732';
					drawCtx.lineWidth = 3;
					// keep what's drawn when resizing? for now clear
				}

				function setDrawingActive(active: boolean) {
					drawingActive = active;
					if (!drawCanvas) return;
					drawCanvas.style.pointerEvents = active ? 'auto' : 'none';
					document.body.classList.toggle('drawing-active', active);
				}

				function getPos(e: MouseEvent | TouchEvent) {
					let x = 0, y = 0;
					if (e instanceof TouchEvent) {
						const t = e.touches[0] || e.changedTouches[0];
						x = t.clientX; y = t.clientY;
					} else {
						x = (e as MouseEvent).clientX; y = (e as MouseEvent).clientY;
					}
					return { x, y };
				}

				function handleDown(e: MouseEvent | TouchEvent) {
					if (!drawingActive || !drawCtx) return;
					drawing = true;
					const { x, y } = getPos(e);
					lastX = x; lastY = y;
					strokes.push({ points: [{ x, y }] });
				}

				function handleMove(e: MouseEvent | TouchEvent) {
					if (!drawing || !drawingActive || !drawCtx) return;
					const { x, y } = getPos(e);
					const current = strokes[strokes.length - 1];
					if (current) {
						// only add every 10 ish pixels moved
						const last = current.points[current.points.length - 1];
						if (Math.hypot(last.x - x, last.y - y) > 10) {
							current.points.push({ x, y });
						}
					}
				}

				function handleUp() { drawing = false; }
				function handleLeave() { drawing = false; }

				function toggleDrawing() { setDrawingActive(!drawingActive); }
				function clearDrawing() {
					if (drawCtx && drawCanvas) {
						drawCtx.clearRect(0, 0, drawCanvas.width, drawCanvas.height);
						strokes.length = 0;
					}
				}

				if (toggleBtn && drawCanvas && drawCtx) {
					resizeCanvas();
					toggleBtn.addEventListener('click', toggleDrawing);
					drawCanvas.addEventListener('mousedown', handleDown);
					drawCanvas.addEventListener('mousemove', handleMove);
					drawCanvas.addEventListener('mouseup', handleUp);
					drawCanvas.addEventListener('mouseleave', handleLeave);
					drawCanvas.addEventListener('touchstart', handleDown, { passive: true });
					drawCanvas.addEventListener('touchmove', handleMove, { passive: true });
					drawCanvas.addEventListener('touchend', handleUp, { passive: true });
				}

				window.addEventListener('resize', () => {
					deviceScale = Math.max(1, Math.min(window.devicePixelRatio || 1, 3));
					resizeCanvas();
				});

				// u can also press "p" for pencil to toggle drawing-!
				document.addEventListener('keydown', (e) => {
					if (e.key.toLowerCase() === 'p') toggleDrawing();
				});

				// press "c" for clear
				document.addEventListener('keydown', (c) => {
					if (c.key.toLowerCase() === 'c') clearDrawing();
				});

				let lastFrameTime = 0;
				const fps = 4; 
				const frameDuration = 1000 / fps;

				// animation loop
				function renderJitter(now: number) {
					if (!drawCtx || !drawCanvas) return;
					if (now - lastFrameTime < frameDuration) {
						requestAnimationFrame(renderJitter);
						return;
					}
					lastFrameTime = now;
					drawCtx.clearRect(0, 0, drawCanvas.width, drawCanvas.height);
					for (const stroke of strokes) {
						if (stroke.points.length < 2) continue;
						drawCtx.beginPath();
						for (let i = 0; i < stroke.points.length - 1; i++) {
							const p = stroke.points[i];
							const n = stroke.points[i + 1];

							const jitter = 2.0; // px amplitude
							const jx1 = (Math.random() - 0.5) * jitter * 2;
							const jy1 = (Math.random() - 0.5) * jitter * 2;
							const jx2 = (Math.random() - 0.5) * jitter * 2;
							const jy2 = (Math.random() - 0.5) * jitter * 2;

							if (i === 0) drawCtx.moveTo(p.x + jx1, p.y + jy1);
							drawCtx.lineTo(n.x + jx2, n.y + jy2);
						}
						drawCtx.stroke();
					}
					requestAnimationFrame(renderJitter);
				}
				requestAnimationFrame(renderJitter);
				//renderJitter();
				animate();
				document.addEventListener('wheel', zoom);
				window.addEventListener('resize', handleResize);
			});
		</script>

		<svg xmlns="http://www.w3.org/2000/svg" version="1.1" class="svg-filters" style="display:none;">
			<defs>
			<filter id="marker-shape">
				<feTurbulence type="fractalNoise" baseFrequency="0 0.15" numOctaves="1" result="warp" />
				<feDisplacementMap xChannelSelector="R" yChannelSelector="G" scale="30" in="SourceGraphic" in2="warp" />
			</filter>
			
			</defs>
		</svg>
	</body>
</html>
